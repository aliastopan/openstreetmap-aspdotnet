@page "/"
@inject IJSRuntime JS
@rendermode InteractiveServer

<h1>OpenStreetMap</h1>
<div style="display: flex; flex-direction: row;">
    <div id="map" style="height: 600px; width: 800px;"></div>
    <div style="padding: 1rem;">

        <GeoMarkerDialog Title="Add Marker"
            IsVisible="@_isModalVisible"
            OnSubmitted="HandleGeoMarkerModalSubmit"
            OnClosed="() => _isModalVisible = false" />

        <h5>Marker:</h5>
        @foreach(var marker in _geoMarkers)
        {
            <div style="display: flex; flex-direction: column; margin-bottom: 1rem;">
                <span style="background-color: midnightblue; color: white;">
                    @marker.MarkerId
                </span>
                <span>@marker.Title</span>
                <span>@marker.Latitude, @marker.Longitude</span>
            </div>
        }
    </div>
</div>

@code
{
    private List<GeoMarker> _geoMarkers = new();
    private DotNetObjectReference<MapPage>? _dotNetRef;

    private bool _isModalVisible = false;
    private double _pendingLat;
    private double _pendingLng;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);

            await JS.InvokeVoidAsync("leafletInterop.initMap", "map", -2.5, 118.0, 5);
            await JS.InvokeVoidAsync("leafletInterop.locateAndCenter", _dotNetRef);
            await JS.InvokeVoidAsync("leafletInterop.enableContextMenu", _dotNetRef);
        }
    }

    [JSInvokable]
    public async Task OnGeolocationFound(double lat, double lng)
    {
        var title = "You are here.";
        var geolocation = new GeoMarker(lat, lng, title);

        _geoMarkers.Add(geolocation);

        await JS.InvokeVoidAsync("leafletInterop.addMarkerToMap",
            geolocation.MarkerId,
            geolocation.Latitude,
            geolocation.Longitude,
            geolocation.Title);

        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnGeolocationError(string errorMessage)
    {
        Console.WriteLine($"Location error: {errorMessage}");
        await Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnAddMarkerRequested(double lat, double lng)
    {
        _pendingLat = lat;
        _pendingLng = lng;
        _isModalVisible = true;
        StateHasChanged();
        await Task.CompletedTask;
    }

    public async Task HandleGeoMarkerModalSubmit(string title)
    {
        var newMarker = new GeoMarker(_pendingLat, _pendingLng, title);

        _geoMarkers.Add(newMarker);
        await JS.InvokeVoidAsync("leafletInterop.addMarkerToMap",
            newMarker.MarkerId,
            newMarker.Latitude,
            newMarker.Longitude,
            newMarker.Title);

        StateHasChanged();
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}
